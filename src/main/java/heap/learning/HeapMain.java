package heap.learning;

// IMPORTANT POINTS

// A HEAP HAS NOTHING TO DO WITH MEMORY

// IT IS A SPECIAL KIND OF BINARY TREE
//                         ++++++

// WHAT IS A HEAP [** MUST SATISFY TWO IMPORTANT REQUIREMENTS **]
// FIRST REQUIREMENT  : IT IS A COMPLETE BINARY TREE 
// SECOND REQUIREMENT : WHICH MUST SATISFY THE HEAP PROPERTY

// HEAP PROPERTY CAN BE DEFINED AS FOLLOWS:
// MAX HEAP : EVERY PARENT IS GREATER THAN OR EQUAL TO ITS CHILDREN
// MIN HEAP : EVERY PARENT IS LESS THAN OR EQUAL TO ITS CHILDREN


// SOME PROPERTIES:

// #1
// USUALLY IMPLEMENTED AS ARRAYS

// #2
// WHEN WE HAVE A COMPLETE BINARY TREE THEN WE CAN BACK THEM WITH ARRAYS 

// #3
// BECAUSE OF HEAP PROPERTY THE MAXIMUM AND MINIMUM WILL ALWAYS BE THE ROOT OF THE TREE
// THAT IS THE BIGGEST ADVANTAGE
// THAT IS WHY HEAP EXISTS
// THUS WE CAN GET THE MAXIMUM OR MINIMUM VALUES IN CONSTANT TIME

// #4 
// HEAPIFY: THE PROCESS OF CONVERTING A BINARY TREE INTO A HEAP 
// WHEN WE ARE ADDING NEW NODES INTO A TREE THEN WE START FROM LEFT CHILD ONWARDS AND THEN MOVE TO THE
// RIGHT. WHEN WE DO THAT THE TREE IS NO LONGER A HEAP. THUS IN ORDER TO CONVERT THE TREE BACK INTO
// A HEAP WE HAVE TO DO A PROCESS OF CONVERTING A BINARY TREE INTO A HEAP. THIS PROCESS IS CALLED 
// HEAPIFY.
// HENCE HEAPIFY IS NEEDED TO BE DONE ONCE WE INSERT A RECORD OR DELETE A RECORD.
//

// #5
// NO REQUIRED ORDERING BETWEEN SIBLINGS WHEN WE HAVE NODES AT THE SAME ORDER THEN WE DONT HAVE TO BE IN
// SOME ORDER. 
// 

// #6
// HEAP AS ARRAYS
// WE PUT THE ROOT AT ARRAY[0]
// WE CAN THEN TRAVERSE EACH LEVEL FROM LEFT TO RIGHT
// SO THE LEFT CHILD OF THE ROOT WOULD GO INTO ARRAY[1]
// AND THE RIGHT CHILD WOULD GO INTO ARRAY[2]

// FORMULAE TO CALCULATE THE I'TH POSITION NODE WOULD TRANSLATE INTO TREE POSITION 
// LEFT CHILD  = 2I + 1
// RIGHT CHILD = 2I + 2
// PARENT      = FLOOR((I-1)/2)

// ******************************
// ALGORITHM TO INSERT INTO HEAP
// ******************************
// #1
// ALWAYS ADD THE NEW ITEMS INTO THE END OF THE ARRAY
// #2
// THEN WE HAVE TO FIX THE HEAP(HEAPIFY)
// #3
// WE CAN COMPARE THE NEW ITEM AGAINST ITS PARENT
// #4
// IF THE ITEM IS GREATER THAN IT'S PARENT WE SWAP IT WITH IT'S PARENT

public class HeapMain {

    public static void main(String[] args) {
        // TODO Auto-generated method stub

    }

}
